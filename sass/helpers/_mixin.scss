@charset "UTF-8";
// Mixins
// --------------------------------------------------
// 
// flex 等分
// $child 参数请使用单引号，因为用于子元素选择器
@mixin equal-flex($child: 'li') {
    display: flex;

    #{unquote($child)} {
        flex: 1;
        width: 1%;
    }
}

// flex center
@mixin center-flex($direction: both) {
    display: flex;
    @if $direction == both {
        justify-content: center;
        align-items: center;
    }
    @else if $direction == x {
        justify-content: center;
    }
    @else if $direction == y {
        align-items: center;
    }
}

// fixed top or bottom or bottom & top
@mixin fixed($pos: 0) {
    position: fixed;
    left: 0;
    right: 0;
    @if $pos == bottom {
        bottom: 0;
    } @else if $pos == all {
        top: 0;
        bottom: 0;
    } @else {
        top: $pos;
    }
}

%fixed-top {
    @include fixed;
}

%fixed-bottom {
    @include fixed(bottom);
}

// // ellipsis
@mixin ellipsis($extend: true) {
    @if $extend {
        @extend %ellipsis;
    }
    @else {
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
    }
}

%ellipsis {
    @include ellipsis(false);
}

// translate center
@mixin center-translate($direction: both) {
    position: absolute;
    @if $direction == both {
        top: 50%;
        left: 50%;
        transform: translate3d(-50%, -50%, 0);
    }
    @else if $direction == x {
        left: 50%;
        transform: translate3d(-50%, 0, 0);
    }
    @else if $direction == y {
        top: 50%;
        transform: translate3d(0, -50%, 0);
    }
}



// // clearfix
@mixin clearfix($extend: true) {
    @if $extend {
        @extend %clearfix;
    }
    @else {
        &::before,
        &::after {
            content: "";
            display: table;
        }
        &::after {
            clear: both;
        }
    }
}

%clearfix {
    @include clearfix(false);
}


// border和transform实现   border1像素边线
// 注意before和after的层级问题
@mixin retina-one-px-border($direction: top, $color: $colorBorder) {
    position: absolute;
    left: 0;
    top: 0;
    box-sizing: border-box;

    @if $direction == top or $direction == bottom{    
        right: 0;
        height: 0;
        transform: scaleY(0.5);
        border-top: 1px solid $color;
    }
    @if $direction == bottom {
        top: auto;
        bottom: 0;
    }
    @if $direction == right or $direction == left{
        width: 0;
        bottom: 0;
        transform: scaleX(0.5);
        border-left: 1px solid $color;
    }
    @if $direction == right {
        left: auto;
        right: 0;
    }
    @if $direction == all {
        width: 200%;
        height: 200%;
        transform-origin: left top;
        transform: scale(0.5);
        border: 1px solid $color;
    }
}

// border top & bottom 上边框，下边框
%border-tb {
    position: relative;
    &::before {
        content: "";
        @include retina-one-px-border(top);
        z-index: 1;
    }
    &::after {
        content: "";
        @include retina-one-px-border(bottom);
    }
}

// border all 四个边框
%border-all {
    position: relative;
    &::before {
        content: "";
        @include retina-one-px-border(all);
        z-index: -1;
    }
}

// v arrow 方向箭头
@mixin v-arrow($direction: right, $borderWidth: 2px, $size: 10px) {
    display: inline-block;
    vertical-align: middle;
    width: $size;
    height: $size;
    @if $direction == top {
        border-top: $borderWidth solid currentColor;
        border-right: $borderWidth solid currentColor;
        transform: rotate(-45deg);
    }
    @else if $direction == right {
        border-top: $borderWidth solid currentColor;
        border-right: $borderWidth solid currentColor;
        transform: rotate(45deg);
    }
    @else if $direction == bottom {
        border-left: $borderWidth solid currentColor;
        border-bottom: $borderWidth solid currentColor;
        transform: rotate(-45deg);
    }
    @if $direction == left {
        border-left: $borderWidth solid currentColor;
        border-bottom: $borderWidth solid currentColor;
        transform: rotate(45deg);
    }
}
// %
// 只定义了%，所以只能通过@extend来调用
//-----------------------------------------------------
 $activeStateSwitch :false;//点击背景显示灰色
// bar line 列表
%bar-line {
    line-height: $barHeight - 10px;
    padding: 5px 10px;
    position: relative;
    display: block;
    overflow: hidden;
    @if $activeStateSwitch{
        &:active,
        &:hover {
            background-color: darken($colorF, 3%);
        }
    }
    &:not(:first-of-type)::before {
        content: "";
        @include retina-one-px-border;
    }
}

// item arrow, 右侧箭头跳转指向
%item-v-right {
    &::after {
        content: "";
        @include v-arrow;
        color: $colorC;
        position: absolute;
        right: 15px;
        top: 50%;
        margin-top: -1px;
        transform: rotate(45deg) translate(0, -50%);
        box-sizing: border-box;
    }
}

// 间隔列表
%gap-item{
    position: relative;
    background: #fff;
    margin: 10px 0;
    @if $activeStateSwitch{
        &:active,
        &:hover {
            background-color: darken($colorF, 3%);
        }
    }
    &::before{
        content: "";
        @include retina-one-px-border;
    }
    &::after{
        content: "";
        @include retina-one-px-border(bottom);
    }
}


// fullscreen center
%fullscreen-center{
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    margin: auto;
}




// z-index
// -------------------------
$z-layers: (
  "default":            1,
  "below":             -1,
  "max":            10000,
  "bar": (
    "bar":           10,
    "btn":           20,
    "icon":          20
  ),
  "backdrop":         998,
  "modal":            999,
  "popover":(
    "popover":        999,
    "arrow":          1000,
  ),
  "scroll": (
    "scrollbar":      9998,
   ),
  "toast":            9999,
);
@function map-has-nested-keys($map, $keys...) {
  @each $key in $keys {
    @if not map-has-key($map, $key) {
      @return false;
    }
    $map: map-get($map, $key);
  }
  
  @return true;
}

@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
 
  @return $map;
}

@function z($layers...) {
  @if not map-has-nested-keys($z-layers, $layers...) {
    @warn "No layer found for `#{inspect($layers...)}` in $z-layers map. Property omitted.";
  }
 
  @return map-deep-get($z-layers, $layers...);
}

// Clearfix
// --------------------------------------------
@mixin clearfix() {
  &:before,
  &:after {
    display: table; // 2
    content: " "; // 1
  }
  &:after {
    clear: both;
  }
}
// ellipsis
// -----------------------------------------------



// Box shadow
// ---------------------------------------------------
@mixin box-shadow($shadow...) {
  -webkit-box-shadow: $shadow;
          box-shadow: $shadow;
}


// Gradients
@mixin linear-gradient($color-from, $color-to) {
  background-color: $color-from; // Old browsers
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$color-from), color-stop(100%,$color-to)); // Chrome, Safari4+
  background-image: -webkit-linear-gradient(top, $color-from 0%, $color-to 100%);           // Chrome10+, Safari5.1+
//  background-image:    -moz-linear-gradient(top, $color-from 0%, $color-to 100%);           // FF3.6+
//  background-image:     -ms-linear-gradient(top, $color-from 0%, $color-to 100%);           // IE10+
  //background-image:      -o-linear-gradient(top, $color-from 0%, $color-to 100%);           // Opera 11.10+
  background-image:         linear-gradient(to bottom, $color-from 0%, $color-to 100%);     // W3C
//  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$color-from}', endColorstr='#{$color-to}', GradientType=0 ); // IE6-9
}
@mixin directional-gradient($color-from, $color-to, $deg: 45deg) {
  background-color: $color-from; // Old browsers
  background-image: -webkit-gradient(linear, left bottom, right top, color-stop(0%,$color-from), color-stop(100%,$color-to)); // Chrome, Safari4+
  background-image: -webkit-linear-gradient(45deg, $color-from 0%, $color-to 100%);           // Chrome10+, Safari5.1+
//  background-image:    -moz-linear-gradient(45deg, $color-from 0%, $color-to 100%);           // FF3.6+
//  background-image:     -ms-linear-gradient(45deg, $color-from 0%, $color-to 100%);           // IE10+
  //background-image:      -o-linear-gradient(45deg, $color-from 0%, $color-to 100%);           // Opera 11.10+
  background-image:         linear-gradient(45deg, $color-from 0%, $color-to 100%);     // W3C
//  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$color-from}', endColorstr='#{$color-to}', GradientType=1 ); // IE6-9
}


// Transforms
// --------------------------------------------------
@mixin transform($transform...) {
  -webkit-transform: $transform;
//      -ms-transform: $transform;
          transform: $transform;
}


// Transitions
// --------------------------------------------------
@mixin transition($transition...) {
  -webkit-transition: $transition;
//     -moz-transition: $transition;
          transition: $transition;
}
@mixin transition-property($property...) {
  -webkit-transition-property: $property;
//     -moz-transition-property: $property;
          transition-property: $property;
}
@mixin transition-duration($duration...) {
  -webkit-transition-duration: $duration;
//     -moz-transition-duration: $duration;
          transition-duration: $duration;
}
@mixin transition-timing-function($function...) {
  -webkit-transition-timing-function: $function;
//     -moz-transition-timing-function: $function;
          transition-timing-function: $function;
}


// Animations
// --------------------------------------------------
@mixin animation-name($name) {
  -webkit-animation-name: $name;
//     -moz-animation-name: $name;
          animation-name: $name;
}
@mixin animation-duration($duration) {
  -webkit-animation-duration: $duration;
//     -moz-animation-duration: $duration;
          animation-duration: $duration;
}
@mixin animation-direction($direction) {
  -webkit-animation-direction: $direction;
//     -moz-animation-direction: $direction;
          animation-direction: $direction;
}


// 一像素分割线
// --------------------------------------------------
@mixin hairline($type, $color, $offset ,$height) {
    &:after{
        position: absolute;
        left: $offset;
        right: 0;
        bottom: 0;
        height: $height;
        background-color: $color;
        content:'';
        -webkit-transform: scaleY(0.5);
        transform: scaleY(0.5);
    }
    @if $type == double {
        &:before{
            position: absolute;
            left: $offset;
            right: 0;
            top: 0;
            height: $height;
            background-color: $color;
            content:'';
            -webkit-transform: scaleY(0.5);
            transform: scaleY(0.5);
        }
    }
}


//button
@mixin btn($color){
    color: #fff;
    background-color: $color;
    border:none;
    &:enabled:active,
        &.#{$namespace}active:enabled {
        color: #fff;
        background-color: darken($color, 10%);
        border: none;
    }
}
